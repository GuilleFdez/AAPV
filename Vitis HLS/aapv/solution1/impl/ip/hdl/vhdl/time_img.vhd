-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity time_img is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    avg_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    avg_TVALID : IN STD_LOGIC;
    avg_TREADY : OUT STD_LOGIC;
    cnt_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_TVALID : IN STD_LOGIC;
    cnt_TREADY : OUT STD_LOGIC;
    res_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_TVALID : OUT STD_LOGIC;
    res_TREADY : IN STD_LOGIC );
end;


architecture behav of time_img is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "time_img_time_img,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.413000,HLS_SYN_LAT=1048600,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=273,HLS_SYN_LUT=194,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv21_100000 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal avg_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln32_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cnt_TDATA_blk_n : STD_LOGIC;
    signal res_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal icmp_ln32_reg_115 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal icmp_ln32_reg_115_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_71 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln32_fu_89_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_115_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_115_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal avg_read_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal avg_read_reg_119_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal avg_read_reg_119_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal avg_read_reg_119_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal avg_read_reg_119_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal avg_read_reg_119_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal avg_read_reg_119_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_read_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_86_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_82_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_82_ce : STD_LOGIC;
    signal grp_fu_86_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal regslice_both_res_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_avg_U_apdone_blk : STD_LOGIC;
    signal avg_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal avg_TVALID_int_regslice : STD_LOGIC;
    signal avg_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_avg_U_ack_in : STD_LOGIC;
    signal regslice_both_cnt_U_apdone_blk : STD_LOGIC;
    signal cnt_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_TVALID_int_regslice : STD_LOGIC;
    signal cnt_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_cnt_U_ack_in : STD_LOGIC;
    signal res_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal res_TVALID_int_regslice : STD_LOGIC;
    signal res_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_res_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component time_img_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component time_img_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component time_img_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fdiv_32ns_32ns_32_16_no_dsp_1_U1 : component time_img_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_82_p0,
        din1 => conv_reg_129,
        ce => grp_fu_82_ce,
        dout => grp_fu_82_p2);

    sitofp_32ns_32_6_no_dsp_1_U2 : component time_img_sitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => cnt_read_reg_124,
        ce => grp_fu_86_ce,
        dout => grp_fu_86_p1);

    regslice_both_avg_U : component time_img_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => avg_TDATA,
        vld_in => avg_TVALID,
        ack_in => regslice_both_avg_U_ack_in,
        data_out => avg_TDATA_int_regslice,
        vld_out => avg_TVALID_int_regslice,
        ack_out => avg_TREADY_int_regslice,
        apdone_blk => regslice_both_avg_U_apdone_blk);

    regslice_both_cnt_U : component time_img_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => cnt_TDATA,
        vld_in => cnt_TVALID,
        ack_in => regslice_both_cnt_U_ack_in,
        data_out => cnt_TDATA_int_regslice,
        vld_out => cnt_TVALID_int_regslice,
        ack_out => cnt_TREADY_int_regslice,
        apdone_blk => regslice_both_cnt_U_apdone_blk);

    regslice_both_res_U : component time_img_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_TDATA_int_regslice,
        vld_in => res_TVALID_int_regslice,
        ack_in => res_TREADY_int_regslice,
        data_out => res_TDATA,
        vld_out => regslice_both_res_U_vld_out,
        ack_out => res_TREADY,
        apdone_blk => regslice_both_res_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_95_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_71 <= add_ln32_fu_89_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                indvar_flatten_reg_71 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_95_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                avg_read_reg_119 <= avg_TDATA_int_regslice;
                cnt_read_reg_124 <= cnt_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                avg_read_reg_119_pp0_iter1_reg <= avg_read_reg_119;
                icmp_ln32_reg_115 <= icmp_ln32_fu_95_p2;
                icmp_ln32_reg_115_pp0_iter1_reg <= icmp_ln32_reg_115;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                avg_read_reg_119_pp0_iter2_reg <= avg_read_reg_119_pp0_iter1_reg;
                avg_read_reg_119_pp0_iter3_reg <= avg_read_reg_119_pp0_iter2_reg;
                avg_read_reg_119_pp0_iter4_reg <= avg_read_reg_119_pp0_iter3_reg;
                avg_read_reg_119_pp0_iter5_reg <= avg_read_reg_119_pp0_iter4_reg;
                avg_read_reg_119_pp0_iter6_reg <= avg_read_reg_119_pp0_iter5_reg;
                icmp_ln32_reg_115_pp0_iter10_reg <= icmp_ln32_reg_115_pp0_iter9_reg;
                icmp_ln32_reg_115_pp0_iter11_reg <= icmp_ln32_reg_115_pp0_iter10_reg;
                icmp_ln32_reg_115_pp0_iter12_reg <= icmp_ln32_reg_115_pp0_iter11_reg;
                icmp_ln32_reg_115_pp0_iter13_reg <= icmp_ln32_reg_115_pp0_iter12_reg;
                icmp_ln32_reg_115_pp0_iter14_reg <= icmp_ln32_reg_115_pp0_iter13_reg;
                icmp_ln32_reg_115_pp0_iter15_reg <= icmp_ln32_reg_115_pp0_iter14_reg;
                icmp_ln32_reg_115_pp0_iter16_reg <= icmp_ln32_reg_115_pp0_iter15_reg;
                icmp_ln32_reg_115_pp0_iter17_reg <= icmp_ln32_reg_115_pp0_iter16_reg;
                icmp_ln32_reg_115_pp0_iter18_reg <= icmp_ln32_reg_115_pp0_iter17_reg;
                icmp_ln32_reg_115_pp0_iter19_reg <= icmp_ln32_reg_115_pp0_iter18_reg;
                icmp_ln32_reg_115_pp0_iter20_reg <= icmp_ln32_reg_115_pp0_iter19_reg;
                icmp_ln32_reg_115_pp0_iter21_reg <= icmp_ln32_reg_115_pp0_iter20_reg;
                icmp_ln32_reg_115_pp0_iter22_reg <= icmp_ln32_reg_115_pp0_iter21_reg;
                icmp_ln32_reg_115_pp0_iter2_reg <= icmp_ln32_reg_115_pp0_iter1_reg;
                icmp_ln32_reg_115_pp0_iter3_reg <= icmp_ln32_reg_115_pp0_iter2_reg;
                icmp_ln32_reg_115_pp0_iter4_reg <= icmp_ln32_reg_115_pp0_iter3_reg;
                icmp_ln32_reg_115_pp0_iter5_reg <= icmp_ln32_reg_115_pp0_iter4_reg;
                icmp_ln32_reg_115_pp0_iter6_reg <= icmp_ln32_reg_115_pp0_iter5_reg;
                icmp_ln32_reg_115_pp0_iter7_reg <= icmp_ln32_reg_115_pp0_iter6_reg;
                icmp_ln32_reg_115_pp0_iter8_reg <= icmp_ln32_reg_115_pp0_iter7_reg;
                icmp_ln32_reg_115_pp0_iter9_reg <= icmp_ln32_reg_115_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_115_pp0_iter5_reg = ap_const_lv1_0))) then
                conv_reg_129 <= grp_fu_86_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln32_fu_95_p2, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state26, regslice_both_res_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln32_fu_95_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln32_fu_95_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                if (((regslice_both_res_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln32_fu_89_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_71) + unsigned(ap_const_lv21_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state26 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln32_fu_95_p2, ap_enable_reg_pp0_iter22, icmp_ln32_reg_115_pp0_iter21_reg, ap_enable_reg_pp0_iter23, icmp_ln32_reg_115_pp0_iter22_reg, avg_TVALID_int_regslice, cnt_TVALID_int_regslice, res_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln32_reg_115_pp0_iter22_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (res_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln32_reg_115_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (res_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((cnt_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)) or ((avg_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln32_fu_95_p2, ap_enable_reg_pp0_iter22, icmp_ln32_reg_115_pp0_iter21_reg, ap_enable_reg_pp0_iter23, icmp_ln32_reg_115_pp0_iter22_reg, ap_block_state24_io, ap_block_state25_io, avg_TVALID_int_regslice, cnt_TVALID_int_regslice, res_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state25_io) or ((icmp_ln32_reg_115_pp0_iter22_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state24_io) or ((icmp_ln32_reg_115_pp0_iter21_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((cnt_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)) or ((avg_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln32_fu_95_p2, ap_enable_reg_pp0_iter22, icmp_ln32_reg_115_pp0_iter21_reg, ap_enable_reg_pp0_iter23, icmp_ln32_reg_115_pp0_iter22_reg, ap_block_state24_io, ap_block_state25_io, avg_TVALID_int_regslice, cnt_TVALID_int_regslice, res_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state25_io) or ((icmp_ln32_reg_115_pp0_iter22_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state24_io) or ((icmp_ln32_reg_115_pp0_iter21_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((cnt_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)) or ((avg_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(icmp_ln32_reg_115_pp0_iter21_reg, res_TREADY_int_regslice)
    begin
                ap_block_state24_io <= ((icmp_ln32_reg_115_pp0_iter21_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state24_pp0_stage0_iter22_assign_proc : process(icmp_ln32_reg_115_pp0_iter21_reg, res_TREADY_int_regslice)
    begin
                ap_block_state24_pp0_stage0_iter22 <= ((icmp_ln32_reg_115_pp0_iter21_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state25_io_assign_proc : process(icmp_ln32_reg_115_pp0_iter22_reg, res_TREADY_int_regslice)
    begin
                ap_block_state25_io <= ((icmp_ln32_reg_115_pp0_iter22_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state25_pp0_stage0_iter23_assign_proc : process(icmp_ln32_reg_115_pp0_iter22_reg, res_TREADY_int_regslice)
    begin
                ap_block_state25_pp0_stage0_iter23 <= ((icmp_ln32_reg_115_pp0_iter22_reg = ap_const_lv1_0) and (res_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln32_fu_95_p2, avg_TVALID_int_regslice, cnt_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((cnt_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)) or ((avg_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln32_fu_95_p2 = ap_const_lv1_0)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln32_fu_95_p2)
    begin
        if ((icmp_ln32_fu_95_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    avg_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln32_fu_95_p2, avg_TVALID_int_regslice)
    begin
        if (((icmp_ln32_fu_95_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            avg_TDATA_blk_n <= avg_TVALID_int_regslice;
        else 
            avg_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    avg_TREADY <= regslice_both_avg_U_ack_in;

    avg_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln32_fu_95_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln32_fu_95_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            avg_TREADY_int_regslice <= ap_const_logic_1;
        else 
            avg_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    cnt_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln32_fu_95_p2, cnt_TVALID_int_regslice)
    begin
        if (((icmp_ln32_fu_95_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cnt_TDATA_blk_n <= cnt_TVALID_int_regslice;
        else 
            cnt_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cnt_TREADY <= regslice_both_cnt_U_ack_in;

    cnt_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln32_fu_95_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln32_fu_95_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cnt_TREADY_int_regslice <= ap_const_logic_1;
        else 
            cnt_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_82_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_82_ce <= ap_const_logic_1;
        else 
            grp_fu_82_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_82_p0 <= avg_read_reg_119_pp0_iter6_reg;

    grp_fu_86_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_86_ce <= ap_const_logic_1;
        else 
            grp_fu_86_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln32_fu_95_p2 <= "1" when (indvar_flatten_reg_71 = ap_const_lv21_100000) else "0";

    res_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter22, icmp_ln32_reg_115_pp0_iter21_reg, ap_enable_reg_pp0_iter23, icmp_ln32_reg_115_pp0_iter22_reg, res_TREADY_int_regslice)
    begin
        if ((((icmp_ln32_reg_115_pp0_iter22_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln32_reg_115_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            res_TDATA_blk_n <= res_TREADY_int_regslice;
        else 
            res_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_TDATA_int_regslice <= grp_fu_82_p2;
    res_TVALID <= regslice_both_res_U_vld_out;

    res_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter22, icmp_ln32_reg_115_pp0_iter21_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln32_reg_115_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_TVALID_int_regslice <= ap_const_logic_1;
        else 
            res_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
