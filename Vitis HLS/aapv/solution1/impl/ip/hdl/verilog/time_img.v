// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="time_img_time_img,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.413000,HLS_SYN_LAT=1048600,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=273,HLS_SYN_LUT=194,HLS_VERSION=2020_2}" *)

module time_img (
        ap_clk,
        ap_rst_n,
        avg_TDATA,
        avg_TVALID,
        avg_TREADY,
        cnt_TDATA,
        cnt_TVALID,
        cnt_TREADY,
        res_TDATA,
        res_TVALID,
        res_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state26 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [31:0] avg_TDATA;
input   avg_TVALID;
output   avg_TREADY;
input  [31:0] cnt_TDATA;
input   cnt_TVALID;
output   cnt_TREADY;
output  [31:0] res_TDATA;
output   res_TVALID;
input   res_TREADY;

 reg    ap_rst_n_inv;
reg    avg_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln32_fu_95_p2;
reg    cnt_TDATA_blk_n;
reg    res_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter22;
reg   [0:0] icmp_ln32_reg_115;
reg   [0:0] icmp_ln32_reg_115_pp0_iter21_reg;
reg    ap_enable_reg_pp0_iter23;
reg   [0:0] icmp_ln32_reg_115_pp0_iter22_reg;
reg   [20:0] indvar_flatten_reg_71;
wire   [20:0] add_ln32_fu_89_p2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
reg    ap_block_state24_pp0_stage0_iter22;
reg    ap_block_state24_io;
reg    ap_block_state25_pp0_stage0_iter23;
reg    ap_block_state25_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_115_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter2_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter3_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter4_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter5_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter6_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter7_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter8_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter9_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter10_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter11_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter12_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter13_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter14_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter15_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter16_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter17_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter18_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter19_reg;
reg   [0:0] icmp_ln32_reg_115_pp0_iter20_reg;
reg   [31:0] avg_read_reg_119;
reg   [31:0] avg_read_reg_119_pp0_iter1_reg;
reg   [31:0] avg_read_reg_119_pp0_iter2_reg;
reg   [31:0] avg_read_reg_119_pp0_iter3_reg;
reg   [31:0] avg_read_reg_119_pp0_iter4_reg;
reg   [31:0] avg_read_reg_119_pp0_iter5_reg;
reg   [31:0] avg_read_reg_119_pp0_iter6_reg;
reg   [31:0] cnt_read_reg_124;
wire   [31:0] grp_fu_86_p1;
reg   [31:0] conv_reg_129;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_82_p0;
wire   [31:0] grp_fu_82_p2;
reg    grp_fu_82_ce;
reg    grp_fu_86_ce;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state26;
wire    regslice_both_res_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_avg_U_apdone_blk;
wire   [31:0] avg_TDATA_int_regslice;
wire    avg_TVALID_int_regslice;
reg    avg_TREADY_int_regslice;
wire    regslice_both_avg_U_ack_in;
wire    regslice_both_cnt_U_apdone_blk;
wire   [31:0] cnt_TDATA_int_regslice;
wire    cnt_TVALID_int_regslice;
reg    cnt_TREADY_int_regslice;
wire    regslice_both_cnt_U_ack_in;
wire   [31:0] res_TDATA_int_regslice;
reg    res_TVALID_int_regslice;
wire    res_TREADY_int_regslice;
wire    regslice_both_res_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
end

time_img_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_82_p0),
    .din1(conv_reg_129),
    .ce(grp_fu_82_ce),
    .dout(grp_fu_82_p2)
);

time_img_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(cnt_read_reg_124),
    .ce(grp_fu_86_ce),
    .dout(grp_fu_86_p1)
);

time_img_regslice_both #(
    .DataWidth( 32 ))
regslice_both_avg_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(avg_TDATA),
    .vld_in(avg_TVALID),
    .ack_in(regslice_both_avg_U_ack_in),
    .data_out(avg_TDATA_int_regslice),
    .vld_out(avg_TVALID_int_regslice),
    .ack_out(avg_TREADY_int_regslice),
    .apdone_blk(regslice_both_avg_U_apdone_blk)
);

time_img_regslice_both #(
    .DataWidth( 32 ))
regslice_both_cnt_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(cnt_TDATA),
    .vld_in(cnt_TVALID),
    .ack_in(regslice_both_cnt_U_ack_in),
    .data_out(cnt_TDATA_int_regslice),
    .vld_out(cnt_TVALID_int_regslice),
    .ack_out(cnt_TREADY_int_regslice),
    .apdone_blk(regslice_both_cnt_U_apdone_blk)
);

time_img_regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_TDATA_int_regslice),
    .vld_in(res_TVALID_int_regslice),
    .ack_in(res_TREADY_int_regslice),
    .data_out(res_TDATA),
    .vld_out(regslice_both_res_U_vld_out),
    .ack_out(res_TREADY),
    .apdone_blk(regslice_both_res_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter23 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_95_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_71 <= add_ln32_fu_89_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_71 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_95_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        avg_read_reg_119 <= avg_TDATA_int_regslice;
        cnt_read_reg_124 <= cnt_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        avg_read_reg_119_pp0_iter1_reg <= avg_read_reg_119;
        icmp_ln32_reg_115 <= icmp_ln32_fu_95_p2;
        icmp_ln32_reg_115_pp0_iter1_reg <= icmp_ln32_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        avg_read_reg_119_pp0_iter2_reg <= avg_read_reg_119_pp0_iter1_reg;
        avg_read_reg_119_pp0_iter3_reg <= avg_read_reg_119_pp0_iter2_reg;
        avg_read_reg_119_pp0_iter4_reg <= avg_read_reg_119_pp0_iter3_reg;
        avg_read_reg_119_pp0_iter5_reg <= avg_read_reg_119_pp0_iter4_reg;
        avg_read_reg_119_pp0_iter6_reg <= avg_read_reg_119_pp0_iter5_reg;
        icmp_ln32_reg_115_pp0_iter10_reg <= icmp_ln32_reg_115_pp0_iter9_reg;
        icmp_ln32_reg_115_pp0_iter11_reg <= icmp_ln32_reg_115_pp0_iter10_reg;
        icmp_ln32_reg_115_pp0_iter12_reg <= icmp_ln32_reg_115_pp0_iter11_reg;
        icmp_ln32_reg_115_pp0_iter13_reg <= icmp_ln32_reg_115_pp0_iter12_reg;
        icmp_ln32_reg_115_pp0_iter14_reg <= icmp_ln32_reg_115_pp0_iter13_reg;
        icmp_ln32_reg_115_pp0_iter15_reg <= icmp_ln32_reg_115_pp0_iter14_reg;
        icmp_ln32_reg_115_pp0_iter16_reg <= icmp_ln32_reg_115_pp0_iter15_reg;
        icmp_ln32_reg_115_pp0_iter17_reg <= icmp_ln32_reg_115_pp0_iter16_reg;
        icmp_ln32_reg_115_pp0_iter18_reg <= icmp_ln32_reg_115_pp0_iter17_reg;
        icmp_ln32_reg_115_pp0_iter19_reg <= icmp_ln32_reg_115_pp0_iter18_reg;
        icmp_ln32_reg_115_pp0_iter20_reg <= icmp_ln32_reg_115_pp0_iter19_reg;
        icmp_ln32_reg_115_pp0_iter21_reg <= icmp_ln32_reg_115_pp0_iter20_reg;
        icmp_ln32_reg_115_pp0_iter22_reg <= icmp_ln32_reg_115_pp0_iter21_reg;
        icmp_ln32_reg_115_pp0_iter2_reg <= icmp_ln32_reg_115_pp0_iter1_reg;
        icmp_ln32_reg_115_pp0_iter3_reg <= icmp_ln32_reg_115_pp0_iter2_reg;
        icmp_ln32_reg_115_pp0_iter4_reg <= icmp_ln32_reg_115_pp0_iter3_reg;
        icmp_ln32_reg_115_pp0_iter5_reg <= icmp_ln32_reg_115_pp0_iter4_reg;
        icmp_ln32_reg_115_pp0_iter6_reg <= icmp_ln32_reg_115_pp0_iter5_reg;
        icmp_ln32_reg_115_pp0_iter7_reg <= icmp_ln32_reg_115_pp0_iter6_reg;
        icmp_ln32_reg_115_pp0_iter8_reg <= icmp_ln32_reg_115_pp0_iter7_reg;
        icmp_ln32_reg_115_pp0_iter9_reg <= icmp_ln32_reg_115_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_115_pp0_iter5_reg == 1'd0))) begin
        conv_reg_129 <= grp_fu_86_p1;
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_95_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_95_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        avg_TDATA_blk_n = avg_TVALID_int_regslice;
    end else begin
        avg_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_95_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        avg_TREADY_int_regslice = 1'b1;
    end else begin
        avg_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_95_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cnt_TDATA_blk_n = cnt_TVALID_int_regslice;
    end else begin
        cnt_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_95_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cnt_TREADY_int_regslice = 1'b1;
    end else begin
        cnt_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_82_ce = 1'b1;
    end else begin
        grp_fu_82_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_86_ce = 1'b1;
    end else begin
        grp_fu_86_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln32_reg_115_pp0_iter22_reg == 1'd0) & (ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln32_reg_115_pp0_iter21_reg == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        res_TDATA_blk_n = res_TREADY_int_regslice;
    end else begin
        res_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_115_pp0_iter21_reg == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_TVALID_int_regslice = 1'b1;
    end else begin
        res_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln32_fu_95_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter23 == 1'b1) & (ap_enable_reg_pp0_iter22 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter23 == 1'b1) & (ap_enable_reg_pp0_iter22 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln32_fu_95_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((regslice_both_res_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_89_p2 = (indvar_flatten_reg_71 + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln32_reg_115_pp0_iter22_reg == 1'd0) & (ap_enable_reg_pp0_iter23 == 1'b1) & (res_TREADY_int_regslice == 1'b0)) | ((icmp_ln32_reg_115_pp0_iter21_reg == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (res_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((cnt_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)) | ((avg_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter23 == 1'b1) & ((1'b1 == ap_block_state25_io) | ((icmp_ln32_reg_115_pp0_iter22_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter22 == 1'b1) & ((1'b1 == ap_block_state24_io) | ((icmp_ln32_reg_115_pp0_iter21_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((cnt_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)) | ((avg_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter23 == 1'b1) & ((1'b1 == ap_block_state25_io) | ((icmp_ln32_reg_115_pp0_iter22_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter22 == 1'b1) & ((1'b1 == ap_block_state24_io) | ((icmp_ln32_reg_115_pp0_iter21_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((cnt_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)) | ((avg_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)))));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((icmp_ln32_reg_115_pp0_iter21_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state24_pp0_stage0_iter22 = ((icmp_ln32_reg_115_pp0_iter21_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state25_io = ((icmp_ln32_reg_115_pp0_iter22_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state25_pp0_stage0_iter23 = ((icmp_ln32_reg_115_pp0_iter22_reg == 1'd0) & (res_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((cnt_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)) | ((avg_TVALID_int_regslice == 1'b0) & (icmp_ln32_fu_95_p2 == 1'd0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign avg_TREADY = regslice_both_avg_U_ack_in;

assign cnt_TREADY = regslice_both_cnt_U_ack_in;

assign grp_fu_82_p0 = avg_read_reg_119_pp0_iter6_reg;

assign icmp_ln32_fu_95_p2 = ((indvar_flatten_reg_71 == 21'd1048576) ? 1'b1 : 1'b0);

assign res_TDATA_int_regslice = grp_fu_82_p2;

assign res_TVALID = regslice_both_res_U_vld_out;

endmodule //time_img
